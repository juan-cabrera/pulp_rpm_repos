---

- name: publish_distribute | Get repo {{ item.repo }} HREF
  uri:
    url: "{{ pulp_api_server }}/pulp/api/v3/repositories/?name={{ item.repo }}"
    user: "{{ pulp_admin_user }}"
    password: "{{ pulp_default_admin_password }}"
    method: GET
    force_basic_auth: y
    status_code: 200
  register: repo

- name: publish_distribute | Repository not found
  fail:
    msg: "\nERROR: repository {{ item.repo }} not found. You need to create it first.\n"
  when: repo.json.count != 1

- name: publish_distribute | Repository versions is empty
  fail:
    msg: |
      ERROR: No Repository version exist for {{ item.repo }}.
      In case it is a **new** sync repository be sure that sync is yes
  when:
    - item.repo_version == 'latest'
    - repo.json.results[0]._latest_version_href == none

- name: publish_distribute | Set latest version HREF
  set_fact:
    repo_version_href: "{{ repo.json.results[0]._latest_version_href }}"
  when: item.repo_version == 'latest'

- name: publish_distribute | Set {{ item.repo_version }} version HREF and check if it exists.
  block:

    - name: Set {{ item.repo_version }} version HREF
      set_fact:
        repo_version_href: "{{ repo.json.results[0]._href }}versions/{{ item.repo_version }}/"

    - name: publish_distribute | Get repo {{ item.repo }} version {{ item.repo_version }}
      uri:
        url: "{{ pulp_api_server }}{{ repo_version_href }}"
        user: "{{ pulp_admin_user }}"
        password: "{{ pulp_default_admin_password }}"
        method: GET
        force_basic_auth: y
        status_code: 200,404
      register: repo_version

    - name: publish_distribute | Repository version not found
      fail:
        msg: "\nERROR: Repository version {{ item.repo_version }} does not exists in {{ item.repo }}.\n"
      when: repo_version.status == 404

  when: item.repo_version != 'latest'

# Check if publication already exists
- name: publish_distribute | Get {{ item.repo }} publications list
  uri:
    url: "{{ pulp_api_server }}/pulp/api/v3/publications/rpm/rpm/"
    user: "{{ pulp_admin_user }}"
    password: "{{ pulp_default_admin_password }}"
    method: GET
    force_basic_auth: y
    status_code: 200,404
  register: publication

- name: publish_distribute | No publications exists
  set_fact:
    publication_check: "NOT_FOUND"
  when: publication.json.count == 0

- name: publish_distribute | Looking for version {{ item.repo_version }} in publication
  set_fact:
    publication_check: "{{ publication.json.results | selectattr('repository_version', 'match', repo_version_href ) | list | first | default('NOT_FOUND') }}"
  when: publication.json.count > 0

- name: publish_distribute | Get version {{ item.repo_version }} publication HREF
  set_fact:
    publication_href: "{{ publication_check._href }}"
  when: publication_check != 'NOT_FOUND'

- name: publish_distribute | Publication does not exist. Create it
  block:

    - name: publish_distribute | Create publication for repo {{ item.repo }} and version {{ item.repo_version }}
      uri:
        url: "{{ pulp_api_server }}/pulp/api/v3/publications/rpm/rpm/"
        user: "{{ pulp_admin_user }}"
        password: "{{ pulp_default_admin_password }}"
        method: POST
        body: {"repository_version":"{{ repo_version_href }}"}
        force_basic_auth: y
        status_code: 202
        body_format: json
      changed_when: publication.status == 202
      register: publication

    - name: publish_distribute | Waiting end of {{ item.repo }} repo publication
      include_tasks: wait_task.yml
      vars:
        task_href: "{{ publication.json.task }}"

    - name: publish_distribute | Get end task status
      uri:
        url: "{{ pulp_api_server }}{{ publication.json.task }}"
        user: "{{ pulp_admin_user }}"
        password: "{{ pulp_default_admin_password }}"
        method: GET
        force_basic_auth: y
        status_code: 200
      register: task

    - name: publish_distribute | Get publication HREF
      set_fact:
        publication_href: "{{ task.json.created_resources | first }}"

  when: publication_check == 'NOT_FOUND'

- name: publish_distribute | Check if {{ item.repo }} distribution {{ item.distribution }} already exists and get its HREF
  uri:
    url: "{{ pulp_api_server }}/pulp/api/v3/distributions/rpm/rpm/?name={{ item.distribution }}"
    user: "{{ pulp_admin_user }}"
    password: "{{ pulp_default_admin_password }}"
    method: GET
    force_basic_auth: y
    status_code: 200,404
    body_format: json
  register: distribution_check

- name: publish_distribute | Create distribution {{ item.distribution }} for repo {{ item.repo }}
  uri:
    url: "{{ pulp_api_server }}/pulp/api/v3/distributions/rpm/rpm/"
    user: "{{ pulp_admin_user }}"
    password: "{{ pulp_default_admin_password }}"
    method: POST
    body: {"name":"{{ item.distribution }}", "base_path":"{{ item.base_path }}", "publication":"{{ publication_href }}"}
    force_basic_auth: y
    status_code: 202
    body_format: json
  changed_when: distribution.status == 202
  register: distribution
  when: distribution_check.json.count == 0

- name: publish_distribute | Attach (PATCH) {{ item.repo }} publication to existing {{ item.distribution }} distribution
  uri:
    url: "{{ pulp_api_server }}{{ distribution_check.json.results[0]._href }}"
    user: "{{ pulp_admin_user }}"
    password: "{{ pulp_default_admin_password }}"
    method: PATCH
    body: {"name":"{{ item.distribution }}", "base_path":"{{ item.base_path }}", "publication":"{{ publication_href }}"}
    force_basic_auth: y
    status_code: 202
    body_format: json
  changed_when: patch_result.status == 202
  register: patch_result
  when:
    - distribution_check.json.count == 1
    - publication_href != distribution_check.json.results[0].publication
